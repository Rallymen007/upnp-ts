"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSDP = void 0;
const dgram_1 = require("dgram");
const events_1 = require("events");
const buffer_1 = require("buffer");
const device_1 = require("./device");
const SSDP_PORT = 1900;
const BROADCAST_ADDR = "239.255.255.250";
class SSDP extends events_1.EventEmitter {
    constructor(_debug, _ip) {
        super();
        this._debug = _debug;
        this._ip = _ip;
        this._skt = dgram_1.createSocket({ type: 'udp4', reuseAddr: true }, (msg, rinfo) => {
            this.processMessage(msg.toString(), rinfo);
        });
        this._skt.on('listening', () => {
            super.emit('ready');
        });
        this._skt.on('error', (err) => {
            console.warn('socket error', err);
        });
        this._skt.bind(SSDP_PORT, this._ip, () => {
            this._skt.addMembership(BROADCAST_ADDR, this._ip);
        });
    }
    shutdown() {
        this._skt.close();
    }
    headersToObj(headers) {
        let ret = [];
        let lines = headers.split("\r\n");
        for (let line of lines) {
            if (line != "" && line.indexOf(":") > 0) {
                ret[line.substr(0, line.indexOf(":")).toUpperCase().trim()] = line.substr(line.indexOf(':') + 1).trim();
            }
            else if (line != '') {
                ret['RESPONSE-TYPE'] = line.substr(0, line.indexOf(" ")).trim().toUpperCase();
            }
        }
        return ret;
    }
    processMessage(msg, info) {
        let res = this.headersToObj(msg);
        if (res['LOCATION']) {
            let d = new device_1.Device((d) => { this._debug(d); }, this._ip, res, info);
            d.discover(() => {
                super.emit('device', d);
            });
        }
    }
    search(st) {
        try {
            let buf = new buffer_1.Buffer("M-SEARCH * HTTP/1.1\r\n" +
                "HOST: " + BROADCAST_ADDR + ":" + SSDP_PORT + "\r\n" +
                "MAN: \"ssdp:discover\"\r\n" +
                "MX: 1\r\n" +
                "ST: " + st + "\r\n" +
                "USER-AGENT: nodejs/" + process.version + " UPnP/2.0 draketv/2.0\r\n\r\n", 'utf8');
            let skt2 = dgram_1.createSocket({ type: 'udp4', reuseAddr: true }, (msg, rinfo) => {
                this.processMessage(msg.toString(), rinfo);
            });
            skt2.on('error', (err) => {
                console.warn('skt2 error', err);
            });
            skt2.on('listening', () => {
                this._debug(["SSDP", "SSDP2 listening on ", skt2.address().address, skt2.address().port]);
                skt2.send(buf, 0, buf.length, SSDP_PORT, BROADCAST_ADDR, (err) => {
                    setTimeout(() => {
                        skt2.close();
                        this._debug(["SSDP", 'closing down requesting socket']);
                    }, 3000);
                });
            });
            skt2.bind(undefined, this._ip, () => {
                skt2.addMembership(BROADCAST_ADDR, this._ip);
            });
        }
        catch (e) {
            console.warn("Unhandled socket exception", e);
        }
    }
}
exports.SSDP = SSDP;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NkcC5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJzc2RwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUE2QztBQUM3QyxtQ0FBc0M7QUFDdEMsbUNBQWdDO0FBQ2hDLHFDQUFpQztBQUVqQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDdkIsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUM7QUFFekMsTUFBYSxJQUFLLFNBQVEscUJBQVk7SUFFbEMsWUFBb0IsTUFBeUIsRUFBVSxHQUFXO1FBQzlELEtBQUssRUFBRSxDQUFDO1FBRFEsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBRTlELElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFHLENBQUMsR0FBVyxFQUFFLEtBQVUsRUFBRSxFQUFFO1lBQ3RGLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtZQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBTyxFQUFFLEVBQUU7WUFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7WUFHdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxh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